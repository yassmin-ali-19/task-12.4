float set_speed,pv_speed;
float smoothingfactor = 0.1; 
void loop() { 
	 if (stringComplete) { 
	    // clear the string when COM receiving is completed 
     mySt = "";  //note: in code below, mySt will not become blank, mySt is blank until '\ 
' is received 
stringComplete = false; 
	  } 
	 //receive command from Visual Studio 
	  if (mySt.substring(0,8) == "vs_start"){ 
	    digitalWrite(pin_fwd,1);      //run motor run forward 
	    digitalWrite(pin_bwd,0); 
	    motor_start = true; 
	  } 
	  if (mySt.substring(0,7) == "vs_stop"){ 
	    digitalWrite(pin_fwd,0); 
	    digitalWrite(pin_bwd,0);      //stop motor 
	    motor_start = false; 
	  } 
	  if (mySt.substring(0,12) == "vs_set_speed"){ 
	    set_speed = mySt.substring(12,mySt.length()).toFloat();  //get string after set_speed 
	  } 
	  if (mySt.substring(0,5) == "vs_kp"){ 
	    kp = PID.kpval(); //get string after vs_kp 
	  } 
	  if (mySt.substring(0,5) == "vs_ki"){ 
	    ki = PID.kp=ival(); //get string after vs_ki 
	  } 
	  if (mySt.substring(0,5) == "vs_kd"){ 
	    kd =  PID.kdval(); //get string after vs_kd 
	  }  
	} 
void detect_a() { 
	  encoder+=1; //increasing encoder at new pulse 
	  m_direction = digitalRead(pin_b); //read direction of motor 
	} 
	ISR(TIMER1_OVF_vect)        // interrupt service routine - tick every 0.1sec 
	{ 
	  TCNT1 = timer1_counter;   // set timer 
	  pv_speed = 60.0*(encoder/200.0)/0.1;  //calculate motor speed, unit is rpm 
      smoothed_speed=smoothingfactor*pv_speed +(1-smoothingfactor)*smoothed_speed;//exponential filter///
	  encoder=0; 
	  //print out speed 
	  if (Serial.available() <= 0) { 
	    Serial.print("speed"); 
	    Serial.println(pv_speed);         //Print speed (rpm) value to Visual Studio 
	    } 
	 //PID program 
	  if (motor_start){ 
	     pwm_pulse=PID.PWMcompute(float set_speed,float pv_speed);
	  } 
	  else{ 
	    e_speed = 0; 
	    e_speed_pre = 0; 
	    e_speed_sum = 0; 
	    pwm_pulse = 0; 
	  } 
	 //update new speed 
	  if (pwm_pulse <255 & pwm_pulse >0){ 
	    analogWrite(pin_pwm,pwm_pulse);  //set motor speed  
	  } 
	  else{ 
	    if (pwm_pulse>255){ 
	      analogWrite(pin_pwm,255); 
	    } 
	    else{ 
	      analogWrite(pin_pwm,0); 
	    } 
	  }
     class PID
{
    float kp, ki, kd;
    float kpval(string mystr)
    {
        if (mySt.substring(0, 5) == "vs_kp")
        {
            kp = mySt.substring(5, mySt.length()).toFloat();
        }
        return kp;
    }
    float kival(string mystr)
    {
        if (mySt.substring(0, 5) == "vs_ki")
        {
            ki = mySt.substring(5, mySt.length()).toFloat();
        }
        return ki;
    }
    float kdval(string mystr)
    {
        if (mySt.substring(0, 5) == "vs_kd")
        {
            kd = mySt.substring(5, mySt.length()).toFloat();
        }
        return kd;
    }
    float PWMcompute(float set_speed, float pv_speed)
    {
        e_speed = set_speed - pv_speed;
        pwm_pulse = e_speed * kp + e_speed_sum * ki + (e_speed - e_speed_pre) * kd;
        e_speed_pre = e_speed;

        e_speed_sum += e_speed;
        if (e_speed_sum > 4000)
            e_speed_sum = 4000;
        if (e_speed_sum < -4000)
            e_speed_sum = -4000;

        return pwm_pulse;
    }
}
